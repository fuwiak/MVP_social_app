version: '3.8'

services:
  # FastAPI Backend (Development)
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-business-backend-dev
    ports:
      - "8000:8000"
    environment:
      # Supabase Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Social Media APIs (optional for development)
      - FACEBOOK_ACCESS_TOKEN=${FACEBOOK_ACCESS_TOKEN:-}
      - INSTAGRAM_ACCESS_TOKEN=${INSTAGRAM_ACCESS_TOKEN:-}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN:-}
      - LINKEDIN_ACCESS_TOKEN=${LINKEDIN_ACCESS_TOKEN:-}
      
      # N8N Integration (optional for development)
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL:-}
      - N8N_API_KEY=${N8N_API_KEY:-}
      
      # Security
      - SECRET_KEY=dev-secret-key-not-for-production
      
      # Redis
      - REDIS_URL=redis://redis-dev:6379
      
      # Development
      - DEBUG=true
    volumes:
      - ./backend:/app  # Live reload for development
      - backend_dev_logs:/app/logs
    depends_on:
      - redis-dev
    networks:
      - ai-business-dev-network
    restart: unless-stopped
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Redis for development
  redis-dev:
    image: redis:7-alpine
    container_name: ai-business-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - ai-business-dev-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL for local development (alternative to Supabase)
  postgres-dev:
    image: postgres:15-alpine
    container_name: ai-business-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ai_business
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai-business-dev-network
    restart: unless-stopped
    profiles:
      - local-db  # Optional - use with: docker-compose -f docker-compose.dev.yml --profile local-db up

volumes:
  redis_dev_data:
    driver: local
  postgres_dev_data:
    driver: local
  backend_dev_logs:
    driver: local

networks:
  ai-business-dev-network:
    driver: bridge


