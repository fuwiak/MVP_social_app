name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  frontend-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Enable corepack
      run: corepack enable
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run ESLint
      run: pnpm lint --format=github
    
    - name: Check code formatting with Prettier
      run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"
    
    - name: Type check
      run: pnpm type-check
    
    - name: Check for unused dependencies
      run: npx depcheck --ignores="@types/*,eslint*,prettier" || true

  backend-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-minimal.txt
        pip install black flake8 isort mypy bandit safety
    
    - name: Check code formatting with Black
      working-directory: ./backend
      run: black --check --diff .
    
    - name: Check import sorting with isort
      working-directory: ./backend
      run: isort --check-only --diff .
    
    - name: Lint with flake8
      working-directory: ./backend
      run: flake8 .
    
    - name: Type check with mypy
      working-directory: ./backend
      run: mypy . --ignore-missing-imports || true
    
    - name: Security check with bandit
      working-directory: ./backend
      run: bandit -r . -x tests/ || true
    
    - name: Check for known security vulnerabilities
      working-directory: ./backend
      run: safety check || true

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  codeql-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      matrix:
        language: ['javascript', 'python']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  license-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Enable corepack
      run: corepack enable
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Check licenses
      run: |
        npx license-checker --summary --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD" || true
        echo "License check completed. Review any flagged licenses."
